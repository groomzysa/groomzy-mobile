/**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import type * as Types from '../../api.schema';

import { api } from '../../..';
export type AddProviderMutationVariables = Types.Exact<{
  tradingName: Types.Scalars['String'];
  phone: Types.Scalars['String'];
  logo?: Types.InputMaybe<Types.Scalars['File']>;
}>;


export type AddProviderMutationResult = { __typename?: 'Mutation', addProvider: { __typename?: 'Provider', id: number, tradingName?: string | null, phone?: string | null, logoUrl?: string | null } };


export const AddProviderDocument = `
    mutation addProvider($tradingName: String!, $phone: String!, $logo: File) {
  addProvider(tradingName: $tradingName, phone: $phone, logo: $logo) {
    id
    tradingName
    phone
    logoUrl
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  endpoints: (build) => ({
    addProvider: build.mutation<AddProviderMutationResult, AddProviderMutationVariables>({
      query: (variables) => ({ document: AddProviderDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useAddProviderMutation } = injectedRtkApi;

